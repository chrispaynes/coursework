= doctype html
html
  head
    = css
      #search-results tr:hover,
      #view-results tr:hover,
      #view-page th:hover {
        background-color: lightgray;
        cursor: pointer;
      }
      #page-switcher {
        width: 100%;
        text-align: center;
      }
      #page-switcher button {
        font-size: 24px;
        font-weight: bold;
        margin: 1em;
        padding: 0.3em;
      }
      .delete-btn {
        color: white;
        background: red;
        border-color: darkred;
        border-radius: 8px;
      }

  body
    div#page-switcher
      button onclick="showViewPage()" View Library
      button onclick="showSearchPage()" Add Books

    div#search-page style="display: none;"
      form id="search-form" onsubmit="return false"
        input type="text" name="search"
        input id="search-btn" type="submit" value="Search"

      table width="100%"
        thead
          tr style="text-align: left;"
            th width="40%" Title
            th width="30%" Author
            th width="10%" Year
            th width="20%" ID
        tbody id="search-results"

    // displays book collection by ranging over Page.Books
    div#view-page
      form#filter-view-results style="float: right;"
        select name="filter" style="font-size: 18px; min-width: 10em;" onchange="filterViewResults()"
          option value="all" All Books
          option value="fiction" Fiction
          option value="nonfiction" Nonfiction

      table width="100%"
        thead
          tr style="text-align: left;"
            th width="45%" onclick="sort('title')" Title
            th width="35%" onclick="sort('author')" Author
            th width="15%" onclick="sort('classification')" Classification
            th width="05%"
        tbody#view-results
          {{range .Books}}
            tr id="book-row-{{.PK}}"
              td {{.Title}}
              td {{.Author}}
              td {{.Classification}}
              td
                button.delete-btn onclick="deleteBook({{.PK}})" Delete
          {{end}}


    script type="text/javascript" src="http://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous"
    = javascript
      $(document).ready(function() {
        $("#filter-view-results option[value='" + {{.Filter}} + "']").prop("selected", true);
      });


      // filterResults sends AJAX request to GET books route
      // sending the serialized input from the #filter-view-results
      function filterViewResults() {
        $.ajax({
          method: "GET",
          url: "/books",
          data: $("#filter-view-results").serialize(),
          success: rebuildLibrary
        })
      }

      // Sort sorts the library by a specified column.
      function sort(col) {
        $.ajax({
          method: "GET",
          url: "/books?sortBy=" + col,
          success: rebuildLibrary
        })
      }

      // rebuildLibrary clears the current library and appends
      // the newly parsed book collection results to the DOM
      function rebuildLibrary(res) {
        var books = JSON.parse(res);
        if(!books) return;

        $("#view-results").empty();

        books.forEach(function(b) {
          appendBook(b);
        });
      }

      // TODO: ADD COMMENTS: deleteBook...
      function deleteBook(pk) {
        $.ajax({
          method: "DELETE",
          url: "/books/" + pk,
          // delete book row from DOM upon book's
          // successful removal from the DB
          success: function() {
          console.log("deleted book:", pk)
            $("#book-row-" + pk).remove();
          }
        });
      }

      // TODO: ADD COMMENTS: appendBook...
      function appendBook(bk){
        $("#view-results").append("<tr id='book-row-" + bk.PK + "'><td>" + bk.Title + "</td><td>"
                                  + bk.Author + "</td><td>" + bk.Classification + "</td>"
                                  + "<td><button class='delete-btn'" + "onclick=deleteBook("+bk.PK+")"
                                  + ">Delete</button></td></tr>")
      }

      // TODO: ADD COMMENTS: showSearchPage...
      function showSearchPage() {
        $("#search-page").show();
        $("#view-page").hide();
      }

      // TODO: ADD COMMENTS: showViewPage...
      function showViewPage() {
        $("#search-page").hide();
        $("#view-page").show();
      }

      // submitSearch serializes the search form before submitting HTTP POST request.
      // Makes async HTTP call to Go's http.HandleFunc("/search"...) at REST endpoint
      function submitSearch() {
        $.ajax({
          url: "/search",
          method: "POST",
          data: $("#search-form").serialize(),
          // returns parsed JSON data or returns no results
          success: function(rawData) {
            if(!JSON.parse(rawData)) return;
            var searchResults = $("#search-results");
            searchResults.empty();

            // maps over parsed data and writes it to the DOM.
            // clicking on <tr> sends async HTTP request with the
            // book id to Go's http.HandleFunc("/books/add"...) at REST endpoint.
            // the endpoint adds the selected <tr>'s book to the database
            JSON.parse(rawData).map(function(res) {
              var row = $("<tr><td>" + res.Title + "</td><td>"
                          + res.Author + "</td><td>" + res.Year
                          + "</td><td>" + res.ID + "</td></tr>");
              searchResults.append(row);
              row.on("click", function() {
                $.ajax({
                  url: "/books?id=" + res.ID,
                  method: "PUT",
                  // updates view page when user adds new book to library
                  success: function(data) {
                    var book = JSON.parse(data);
                    if(!book) return;
                    appendBook(book);
                  }
                });
              });
            });
          }
        });

        // prevents default button action behavior
        return false;
      }
      // listen is an immediately invoked function expression which
      // calls submitSearch upon clicking the search button.
      (function listen(){
        var s_btn = document.getElementById("search-btn");
        if(window.addEventListener) {
          s_btn.addEventListener("click", submitSearch, false);
        }
        if(window.attachEvent) {
          s_btn.attachEvent("onclick", submitSearch);
        }
      }());